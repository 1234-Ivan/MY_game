import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, URLInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = "7844163188:AAFpw69SKoBc6y0OdV2pqNW70FuqMoxKJNE"
MANAGER_GROUP_ID = -4804171467  # ID –≥—Ä—É–ø–ø—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
ADMINS = [596786513]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# ====== –ë–ê–ó–ê –î–ê–ù–ù–´–• ======
def init_db():
    conn = sqlite3.connect('clients.db')
    cursor = conn.cursor()
    cursor.execute('''
           CREATE TABLE IF NOT EXISTS users (
               user_id INTEGER  PRIMARY KEY,
               username TEXT,
               first_name TEXT,
               last_name TEXT,
               phone TEXT
        )
    ''')
    conn.commit()
    conn.close()


init_db()


def save_user(user_id, username, first_name, last_name):
    conn = sqlite3.connect('clients.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users 
        (user_id, username, first_name, last_name) 
        VALUES (?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name))
    conn.commit()
    conn.close()


def get_all_users():
    conn = sqlite3.connect('clients.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users')
    users = cursor.fetchall()
    conn.close()
    return [user[0] for user in users]


# ====== FSM –î–õ–Ø –†–ê–°–°–´–õ–ö–ò ======
class BroadcastStates(StatesGroup):
    topic = State()
    description = State()
    image = State()
    link = State()
    confirm = State()


# ====== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ======
@dp.message(Command("start"))
async def start(message: types.Message):
    save_user(message.from_user.id,
              message.from_user.username,
              message.from_user.first_name,
              message.from_user.last_name)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")


@dp.message(F.chat.type == "private")
async def handle_client_message(message: types.Message):
    save_user(message.from_user.id,
              message.from_user.username,
              message.from_user.first_name,
              message.from_user.last_name)

    keyboard = InlineKeyboardBuilder()
    keyboard.add(types.InlineKeyboardButton(
        text="–û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É",
        url=f"tg://user?id={message.from_user.id}"
    ))

    user_info = f"üë§ –ö–ª–∏–µ–Ω—Ç:\nID: {message.from_user.id}\n"
    if message.from_user.username:
        user_info += f"Username: @{message.from_user.username}\n"
    user_info += f"–ò–º—è: {message.from_user.first_name}"
    if message.from_user.last_name:
        user_info += f" {message.from_user.last_name}"

    await bot.send_message(
        chat_id=MANAGER_GROUP_ID,
        text=f"{user_info}\n\nüì© –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}",
        reply_markup=keyboard.as_markup()
    )
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º!")


# ====== –†–ê–°–°–´–õ–ö–ê ======
@dp.message(Command("broadcast"))
async def start_broadcast(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    await state.set_state(BroadcastStates.topic)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Ä–∞—Å—Å—ã–ª–∫–∏:")


@dp.message(BroadcastStates.topic)
async def process_topic(message: types.Message, state: FSMContext):
    await state.update_data(topic=message.text)
    await state.set_state(BroadcastStates.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")


@dp.message(BroadcastStates.description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(BroadcastStates.image)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())