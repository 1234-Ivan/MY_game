import sqlite3
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
import asyncio
import html


# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "7844163188:AAFsJr9eCh1SzsT-OWAFtwcJJtppJM0gvqk"
MANAGER_GROUP_ID = -4804171467 # ID –≥—Ä—É–ø–ø—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
ADMINS = [1027932191]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
processing_status = {}

# ===== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====
def init_db():
    conn = sqlite3.connect('clients.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT
        )
    ''')
    conn.commit()
    conn.close()

def save_user(user_id, username, first_name, last_name):
    conn = sqlite3.connect('clients.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, username, first_name, last_name)
        VALUES (?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name))
    conn.commit()
    conn.close()

init_db()

# ===== FAQ =====
FAQ = {
    "–∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å": "–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ: https://example.com/pay",
    "–≥–¥–µ –º–æ–π –∑–∞–∫–∞–∑": "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –∏ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å.",
    "–∫–∞–∫–∏–µ —É –≤–∞—Å —Ç–æ–≤–∞—Ä—ã": "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –Ω–∞ —Å–∞–π—Ç–µ: https://example.com/catalog",
}

# ===== /start =====
@dp.message(Command("start"))
async def start(message: Message):
    save_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.")

# ===== –í–û–ü–†–û–° –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =====
@dp.message(F.chat.type == "private")
async def handle_client_message(message: Message):
    save_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )

    lower_text = message.text.lower()

    for key, value in FAQ.items():
        if key in lower_text:
            await message.answer(value)
            return

    text = (
        "‚ùì <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
        f"<b>–í–æ–ø—Ä–æ—Å:</b> {html.escape(message.text)}\n\n"
        f"<b>–ò–º—è:</b> {html.escape(message.from_user.full_name)}\n"
        f"<b>Username:</b> @{html.escape(message.from_user.username or '‚Äî')}\n"
        f"<b>ID:</b> <code>{message.from_user.id}</code>"
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(
            text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É",
            callback_data=f"reply_{message.from_user.id}_{message.message_id}"
        ),
        InlineKeyboardButton(
            text="‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ",
            callback_data=f"done_{message.from_user.id}_{message.message_id}"
        )
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
    message_key = f"{message.from_user.id}_{message.message_id}"
    processing_status[message_key] = {
        "is_processing": False,
        "processed_by": None
    }

    await bot.send_message(
        chat_id=MANAGER_GROUP_ID,
        text=text,
        reply_markup=keyboard.as_markup()
    )
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")


# ===== –í–ó–Ø–¢–û –í –û–ë–†–ê–ë–û–¢–ö–£ =====
@dp.callback_query(F.data.startswith("reply_"))
async def handle_reply_click(callback: CallbackQuery):
    _, user_id, msg_id = callback.data.split("_")
    user_id = int(user_id)
    msg_id = int(msg_id)

    message_key = f"{user_id}_{msg_id}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∑—è—Ç –ª–∏ —É–∂–µ –≤–æ–ø—Ä–æ—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
    if message_key in processing_status and processing_status[message_key]["is_processing"]:
        await callback.answer("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –≤–∑—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.", show_alert=True)
        return

    # –ü–æ–º–µ—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –≤–∑—è—Ç—ã–π –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
    processing_status[message_key] = {
        "is_processing": True,
        "processed_by": callback.from_user.id
    }

    buttons = InlineKeyboardBuilder()
    buttons.row(
        InlineKeyboardButton(
            text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É",
            url=f"tg://user?id={user_id}"
        ),
        InlineKeyboardButton(
            text="‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ",
            callback_data=f"done_{user_id}_{msg_id}"
        )
    )

    new_text = callback.message.text
    if "üü° –í–∑—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É" not in new_text:
        new_text += f"\n\nüü° –í–∑—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @{callback.from_user.username or callback.from_user.full_name}"

    await callback.message.edit_text(new_text, reply_markup=buttons.as_markup())
    await callback.answer("–í—ã –≤–∑—è–ª–∏ –≤–æ–ø—Ä–æ—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.")


# ===== –û–¢–ú–ï–ß–ï–ù–û –ö–ê–ö –û–¢–í–ï–ß–ï–ù–ù–û–ï =====
@dp.callback_query(F.data.startswith("done_"))
async def handle_done_click(callback: CallbackQuery):
    _, user_id, msg_id = callback.data.split("_")
    user_id = int(user_id)
    msg_id = int(msg_id)

    message_key = f"{user_id}_{msg_id}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–º–µ—á–∞—Ç—å –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ
    if (message_key in processing_status and
            processing_status[message_key]["is_processing"] and
            processing_status[message_key]["processed_by"] != callback.from_user.id and
            callback.from_user.id not in ADMINS):
        await callback.answer(
            "–¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä, –≤–∑—è–≤—à–∏–π –≤–æ–ø—Ä–æ—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É, –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ.",
            show_alert=True)
        return

    buttons = InlineKeyboardBuilder()
    buttons.row(
        InlineKeyboardButton(
            text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É",
            url=f"tg://user?id={user_id}"
        )
    )

    new_text = callback.message.text
    if "‚úÖ –û—Ç–≤–µ—Ç –¥–∞–Ω" not in new_text:
        new_text += f"\n\n‚úÖ –û—Ç–≤–µ—Ç –¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @{callback.from_user.username or callback.from_user.full_name}"

    await callback.message.edit_text(new_text, reply_markup=buttons.as_markup())
    await callback.answer("–û—Ç–º–µ—Ç–∏–ª–∏ –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ.")

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å—Ç–∞—Ç—É—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if message_key in processing_status:
        del processing_status[message_key]


# ===== –ó–∞–ø—É—Å–∫ =====
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())