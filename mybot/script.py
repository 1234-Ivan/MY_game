from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from urllib import parse
import requests


bot = Bot("7844163188:AAFsJr9eCh1SzsT-OWAFtwcJJtppJM0gvqk")
admin_chat = -4804171467
dp = Dispatcher()
inf = []

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ aiogram 3!")



# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: —Ä–æ–ª—å –∏ –ø—Ä–∞–≤–∏–ª–∞
system_message = {
    "role": "system",
    "content": (
        "–¢—ã ‚Äî –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–º–µ–Ω–∏ –ë–æ—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ, –≤–µ—Å–µ–ª–æ –∏ –≤—Å–µ–≥–¥–∞ –Ω–∞ ¬´—Ç—ã¬ª, "
        "–Ω–æ –µ—Å–ª–∏ —É —Ç–µ–±—è –±—É–¥—É—Ç —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ –Ω–∞ —ç—Ç—É —Ç–µ–º—É, –∞ –∏–º–µ–Ω–Ω–æ –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å —ç—Ç–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏, "
        "—Ç—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å: –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –Ω–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /–∞–¥–º–∏–Ω—á–∞—Ç —Ç–æ —Ç—ã –±—É–¥–µ—à—å —Ä–æ–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É –Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å –æ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –Ω–µ–ª—å–∑—è"
        "–í—Å–µ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏ –ø–æ–Ω—è—Ç–Ω—ã–º–∏, –±–µ–∑ –∞—Ö–∞—Ö–∞—Ö–∞.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "- /–≤—Ä–µ–º—è ‚Äî —Å–∫–∞–∂–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n"
        "- /–∞–Ω–µ–∫–¥–æ—Ç ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç\n"
        "- /–ø–æ–º–æ—â—å ‚Äî –ø–µ—Ä–µ—á–∏—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã\n\n"
        "–ì–æ—Ç–æ–≤? –¢–æ–≥–¥–∞ –∂–¥–∏ –∫–æ–º–∞–Ω–¥!"
    )
}

answers = {}

def ask(text: str):
    user_message = {"role": "user", "content": text}
    response = requests.post(
        "http://localhost:11434/api/chat",
        json={
            "model": "llama3",
            "messages": [system_message, user_message],
            "stream": False
        }
    )
    return response.json()["message"]["content"]


def generate_deep_link(message_id, user_id, text):
    inf.append({user_id: [message_id, text]})
    return f"https://t.me/UnoGameCards_bot?start={str(inf.index({user_id: [message_id, text]}))}"

@dp.message(Command("start"))
async def start_handler(message: Message):
    parts = message.text.strip().split(maxsplit=1)

    if len(parts) > 1:
        # –≠—Ç–æ deep-link –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        try:
            param = parts[1]
            data = inf[int(param)]

            user_id = list(data.keys())[0]

            message_id, text = data[user_id]


            await message.answer(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n")

        except Exception as e:
            await bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

    else:
        # –û–±—ã—á–Ω—ã–π –≤—ã–∑–æ–≤ /start –≤ —á–∞—Ç–µ
        await bot.send_message(
            message.chat.id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ë–æ—Ç–∏–∫. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
            "- –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
            "- –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
            "- –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
        )

@dp.message(lambda message: message.chat.type == "private" and answers.get(message.from_user.id) is None)
async def ask_ai(message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="send to admins", callback_data="help:" + message.text)]
    ])
    answer = ask(message.text)
    await bot.send_message(message.chat.id, answer, reply_markup=markup)

@dp.message(Command("about"), lambda message: message.reply_to_message)
async def about_handler(message):
    await bot.send_message(
        message.chat.id,
        f"message_id: {message.reply_to_message.id}\nuser_id: {message.reply_to_message.from_user.id}"
    )

@dp.callback_query()
async def callback_data(call):
    if call.data.startswith("help:"):


        markup_2 = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="send to admins‚úîÔ∏è", callback_data="say")],
        ])


        text = call.data[5:]

        try:

            await bot.edit_message_text(call.message.text, call.message.chat.id, call.message.id, reply_markup=markup_2)

        except:

            pass

        link = generate_deep_link(
            message_id=call.message.message_id,
            user_id=call.from_user.id,
            text=text
        )

        print(link)

        await  bot.send_message(admin_chat, f"{text}\n[answer]({link})", parse_mode="Markdown")

    elif call.data == "say":

        await bot.answer_callback_query(call.id, "you have already sent to admins")


async def answer_mess(message: Message):
    recipient_id = answers.get(message.from_user.id)
    if recipient_id:
        try:
            await bot.send_message(recipient_id, message.text)
        except Exception as e:
            await bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        answers.pop(message.from_user.id)
        await bot.delete_message(message.chat.id, message.id)


async def main():
    await bot.send_message(admin_chat, "bot started")
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())