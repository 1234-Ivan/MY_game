# from aiogram import Bot, Dispatcher, F
# from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
#     InlineKeyboardButton
# from aiogram.enums import ParseMode
# from aiogram.filters import CommandStart
# from aiogram.client.default import DefaultBotProperties
# import asyncio
#
# BOT_TOKEN = "7844163188:AAFsJr9eCh1SzsT-OWAFtwcJJtppJM0gvqk"
#
# bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
# dp = Dispatcher()
#
# # –®–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞ (8x8)
# # –ü—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ - '  ', —Ñ–∏–≥—É—Ä—ã: 'wP' - –±–µ–ª–∞—è –ø–µ—à–∫–∞, 'bK' - —á–µ—Ä–Ω—ã–π –∫–æ—Ä–æ–ª—å –∏ —Ç.–¥.
# # initial_board = [
# #     ["bR", "bN", "bp", "bQ", "bK", "bp", "bN", "bR"],
# #     ["bP", "bP", "bP", "bP", "bP", "bP", "bP", "bP"],
# #     ["  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
# #     ["  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
# #     ["  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
# #     ["  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
# #     ["wP", "wP", "wP", "wP", "wP", "wP", "wP", "wP"],
# #     ["wR", "wN", "wB", "wQ", "wK", "wB", "wN", "wR"]
# # ]
#
# initial_board = [
#     ["bR", "bN", "bp", "bQ", "bK", "bp", "bN", "bR"],
#     ["bP", "bP", "bP", "bP", "bP", "bP", "bP", "bP"],
#     ["  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
#     ["  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
#     ["  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
#     ["  ", "  ", "  ", "  ", "  ", "wQ", "  ", "  "],
#     ["wP", "wP", "wP", "wP", "wP", "wP", "wP", "wP"],
#     ["wR", "wN", "wB", "  ", "wK", "wB", "wN", "wR"]
# ]
#
#
# # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–∏–≥—É—Ä
# piece_symbols = {
#     "wK": "‚ôî", "wQ": "‚ôï", "wR": "‚ôñ", "wB": "‚ôó", "wN": "‚ôò", "wP": "‚ôó",
#     "bK": "‚ôö", "bQ": "‚ôõ", "bR": "‚ôú", "bp": "‚ôù", "bN": "‚ôû",
#     "bP": "‚ôù",
#     "  ": "¬∑"
# }
#
# # –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
# user_states = {}
#
# # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# main_menu = ReplyKeyboardMarkup(
#     keyboard=[
#         [KeyboardButton(text="üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")],
#         [KeyboardButton(text="‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥")]
#     ],
#     resize_keyboard=True
# )
#
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–æ—Å–∫–∏ –≤ HTML
# def board_to_html(board):
#     rows = []
#     for i in range(8):
#         line = f"{8 - i} |"
#         for j in range(8):
#             symbol = piece_symbols.get(board[i][j], ' ')
#             line += f"{symbol} "
#         line += f"| {8 - i}"
#         rows.append(line)
#     body = "\n".join(rows)
#     return (
#         "<pre>"
#         "   a b c d e f g h\n"
#         " +-----------------+\n"
#         f"{body}\n"
#         " +-----------------+\n"
#         "   a b c d e f g h"
#         "</pre>"
#     )
#
#
# @dp.message(CommandStart())
# async def cmd_start(message: Message):
#     await message.answer("‚ôü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ –±–æ—Ç–∞! ‚ôü", reply_markup=main_menu)
#
#
# @dp.message(F.text == "üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
# async def start_game(message: Message):
#     user_id = message.from_user.id
#     user_states[user_id] = {
#         "board": [row[:] for row in initial_board],
#         "color": "white",  # –ò–≥—Ä–æ–∫ –∏–≥—Ä–∞–µ—Ç –±–µ–ª—ã–º–∏
#         "waiting_for_move": False,
#         "selected_piece": None
#     }
#
#     await message.answer("–í—ã –∏–≥—Ä–∞–µ—Ç–µ –±–µ–ª—ã–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏. –í–∞—à —Ö–æ–¥!")
#     await message.answer(
#         board_to_html(user_states[user_id]["board"]),
#         parse_mode="HTML"
#     )
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'e2'):")
#
#
# @dp.message(F.text.regexp(r'^[a-h][1-8]$'))
# async def process_move(message: Message):
#     user_id = message.from_user.id
#     if user_id not in user_states:
#         await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
#         return
#
#     state = user_states[user_id]
#     text = message.text.lower()
#     col = ord(text[0]) - ord('a')
#     row = 8 - int(text[1])
#
#     # –ï—Å–ª–∏ —Ñ–∏–≥—É—Ä–∞ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
#     if not state["waiting_for_move"]:
#         piece = state["board"][row][col]
#         if piece == "  " or not piece.startswith(state["color"][0]):
#             await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ñ–∏–≥—É—Ä—É!")
#             return
#
#         state["selected_piece"] = (row, col)
#         state["waiting_for_move"] = True
#         await message.answer(f"–í—ã–±—Ä–∞–Ω–∞ —Ñ–∏–≥—É—Ä–∞ –Ω–∞ {text}. –ö—É–¥–∞ –ø–æ—Ö–æ–¥–∏–º? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'e4')")
#     else:
#         # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞
#         from_row, from_col = state["selected_piece"]
#         piece = state["board"][from_row][from_col]
#
#         # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö–æ–¥–∞ (–±–µ–∑ —É—á–µ—Ç–∞ –ø—Ä–∞–≤–∏–ª —à–∞—Ö–º–∞—Ç)
#         if is_valid_move(state["board"], from_row, from_col, row, col):
#             # –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥
#             state["board"][row][col] = piece
#             state["board"][from_row][from_col] = "  "
#
#             # –ü–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ –±–æ—Ç—É (–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É)
#             state["color"] = "black" if state["color"] == "white" else "white"
#             state["waiting_for_move"] = False
#             state["selected_piece"] = None
#
#             await message.answer(
#                 board_to_html(user_states[user_id]["board"]),
#                 parse_mode="HTML"
#             )
#             await message.answer(f"–§–∏–≥—É—Ä–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –Ω–∞ {text}")
#
#             # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ–¥ –±–æ—Ç–∞
#             if state["color"] == "black":
#                 await bot_move(message, state)
#         else:
#             await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ö–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
#             state["waiting_for_move"] = False
#             state["selected_piece"] = None
#
#
# # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—Å–ø–æ–º. —Ñ—É–Ω–∫—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# def path_clear(board, fr, fc, tr, tc):
#     """–ü—É—Ç—å –ø—É—Å—Ç? (–¥–ª—è –ª–∞–¥—å–∏/—Å–ª–æ–Ω–∞/—Ñ–µ—Ä–∑—è)"""
#     dr = (tr-fr) and ((tr-fr)//abs(tr-fr))  # -1,0,1
#     dc = (tc-fc) and ((tc-fc)//abs(tc-fc))
#     r, c = fr+dr, fc+dc
#     while (r, c) != (tr, tc):
#         if board[r][c] != "  ":
#             return False
#         r += dr
#         c += dc
#     return True
#
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ö–æ–¥–∞
# def is_valid_move(board, fr, fc, tr, tc):
#     """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ö–æ–¥–∞ —Ñ–∏–≥—É—Ä—ã (–±–µ–∑ —à–∞—Ö–∞/—Ä–æ–∫–∏—Ä–æ–≤–∫–∏/–ø–µ—à.–ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è)"""
#     if not (0 <= fr < 8 and 0 <= fc < 8 and 0 <= tr < 8 and 0 <= tc < 8):
#         return False
#
#     piece = board[fr][fc]
#     if piece == "  ":
#         return False
#     me, enemy = piece[0], 'b' if piece[0]=='w' else 'w'
#     target = board[tr][tc]
#
#
#
#
#     # –Ω–µ–ª—å–∑—è –±–∏—Ç—å —Å–≤–æ—é —Ñ–∏–≥—É—Ä—É
#     if target != "  " and target[0] == me:
#         return False
#
#     dr, dc = tr-fr, tc-fc
#     abs_dr, abs_dc = abs(dr), abs(dc)
#
#     # ‚îÄ‚îÄ‚îÄ –ü–µ—à–∫–∞ ‚îÄ‚îÄ‚îÄ
#     if piece[1] == 'P':
#         direction = -1 if me=='w' else 1
#         start_row = 6 if me=='w' else 1
#
#         # –æ–±—ã—á–Ω—ã–π —Ö–æ–¥
#         if dc == 0:
#             # —à–∞–≥ –Ω–∞ 1 –∫–ª–µ—Ç–∫—É
#             if dr == direction and target == "  ":
#                 return True
#             # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–≤–æ–π–Ω–æ–π —Ö–æ–¥
#             if fr == start_row and dr == 2*direction and board[fr+direction][fc] == "  " and target == "  ":
#                 return True
#         # –≤–∑—è—Ç–∏–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
#         if abs_dc == 1 and dr == direction and target != "  " and target[0] == enemy:
#             return True
#         return False
#
#     # ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—å ‚îÄ‚îÄ‚îÄ
#     if piece[1] == 'N':
#         return (abs_dr, abs_dc) in {(1,2),(2,1)}
#
#     # ‚îÄ‚îÄ‚îÄ –°–ª–æ–Ω ‚îÄ‚îÄ‚îÄ
#     if piece[1] == 'B':
#         return abs_dr == abs_dc and path_clear(board, fr, fc, tr, tc)
#
#     # ‚îÄ‚îÄ‚îÄ –õ–∞–¥—å—è ‚îÄ‚îÄ‚îÄ
#     if piece[1] == 'R':
#         if (dr == 0 or dc == 0) and path_clear(board, fr, fc, tr, tc):
#             return True
#         return False
#
#     # ‚îÄ‚îÄ‚îÄ –§–µ—Ä–∑—å ‚îÄ‚îÄ‚îÄ
#     if piece[1] == 'Q':
#         if (abs_dr == abs_dc or dr == 0 or dc == 0) and path_clear(board, fr, fc, tr, tc):
#             return True
#         return False
#
#     # ‚îÄ‚îÄ‚îÄ –ö–æ—Ä–æ–ª—å ‚îÄ‚îÄ‚îÄ
#     if piece[1] == 'K':
#         return max(abs_dr, abs_dc) == 1  # –±–µ–∑ —Ä–æ–∫–∏—Ä–æ–≤–∫–∏
#
#     return False
#
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–æ–¥–∞ –±–æ—Ç–∞
# async def bot_move(message: Message, state):
#     """–ü—Ä–æ—Å—Ç–æ–π —Ö–æ–¥ –±–æ—Ç–∞ (—Å–ª—É—á–∞–π–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ö–æ–¥)"""
#     await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–¥—É–º–∏–π
#
#     for i in range(8):
#         for j in range(8):
#             if state["board"][i][j] == "bP" and i < 7 and state["board"][i + 1][j] == "  ":
#                 state["board"][i + 1][j] = "bP"
#                 state["board"][i][j] = "  "
#                 state["color"] = "white"
#                 await message.answer("–ë–æ—Ç –ø–æ—Ö–æ–¥–∏–ª –ø–µ—à–∫–æ–π.")
#                 await message.answer(board_to_html(state["board"]), parse_mode="HTML")
#                 await message.answer("–í–∞—à —Ö–æ–¥!")
#                 return
#
#     await message.answer("–ë–æ—Ç –Ω–µ –Ω–∞—à–µ–ª –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ö–æ–¥–∞!")
#
#
# async def main():
#     await dp.start_polling(bot)
#
#
# if __name__ == "__main__":
#     asyncio.run(main())
#
# def is_valid_move(board, fr, fc, tr, tc):
#     """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ö–æ–¥–∞ —Ñ–∏–≥—É—Ä—ã (–±–µ–∑ —à–∞—Ö–∞/—Ä–æ–∫–∏—Ä–æ–≤–∫–∏/–ø–µ—à.–ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è)"""
#     if not (0 <= fr < 8 and 0 <= fc < 8 and 0 <= tr < 8 and 0 <= tc < 8):
#         return False
#
#     piece = board[fr][fc]
#     if piece == "  ":
#         return False
#     me, enemy = piece[0], 'b' if piece[0]=='w' else 'w'
#     target = board[tr][tc]
#
#     # –Ω–µ–ª—å–∑—è –±–∏—Ç—å —Å–≤–æ—é —Ñ–∏–≥—É—Ä—É
#     if target != "  " and target[0] == me:
#         return False
#
#
#     print(tr-fr, tc-fc)
#
#     dr, dc = tr-fr, tc-fc
#     abs_dr, abs_dc = abs(dr), abs(dc)
#
#     # ‚îÄ‚îÄ‚îÄ –ü–µ—à–∫–∞ ‚îÄ‚îÄ‚îÄ
#     if piece[1] == 'P':
#         direction = -1 if me=='w' else 1
#         start_row = 6 if me=='w' else 1
#
#         # –æ–±—ã—á–Ω—ã–π —Ö–æ–¥
#         if dc == 0:
#             # —à–∞–≥ –Ω–∞ 1 –∫–ª–µ—Ç–∫—É
#             if dr == direction and target == "  ":
#                 return True
#             # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–≤–æ–π–Ω–æ–π —Ö–æ–¥
#             if fr == start_row and dr == 2*direction and board[fr+direction][fc] == "  " and target == "  ":
#                 return True
#         # –≤–∑—è—Ç–∏–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
#         if abs_dc == 1 and dr == direction and target != "  " and target[0] == enemy:
#             return True
#         return False
#
#     # ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—å ‚îÄ‚îÄ‚îÄ
#     if piece[1] == 'N':
#         return (abs_dr, abs_dc) in {(1,2),(2,1)}
#
#     # ‚îÄ‚îÄ‚îÄ –°–ª–æ–Ω ‚îÄ‚îÄ‚îÄ
#     if piece[1] == 'B':
#         return abs_dr == abs_dc and path_clear(board, fr, fc, tr, tc)
#
#     # ‚îÄ‚îÄ‚îÄ –õ–∞–¥—å—è ‚îÄ‚îÄ‚îÄ
#     if piece[1] == 'R':
#         if (dr == 0 or dc == 0) and path_clear(board, fr, fc, tr, tc):
#             return True
#         return False
#
#     # ‚îÄ‚îÄ‚îÄ –§–µ—Ä–∑—å ‚îÄ‚îÄ‚îÄ
#     if piece[1] == 'Q':
#         if (abs_dr == abs_dc or dr == 0 or dc == 0) and path_clear(board, fr, fc, tr, tc):
#             return True
#         return False
#
#     # ‚îÄ‚îÄ‚îÄ –ö–æ—Ä–æ–ª—å ‚îÄ‚îÄ‚îÄ
#     if piece[1] == 'K':
#         return max(abs_dr, abs_dc) == 1  # –±–µ–∑ —Ä–æ–∫–∏—Ä–æ–≤–∫–∏
#
#     return False


# from aiogram import Bot, Dispatcher, F
# from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton , InlineKeyboardMarkup, \
#     InlineKeyboardButton
# from aiogram.enums import ParseMode
# from aiogram.filters import CommandStart
# from aiogram.client.default import DefaultBotProperties
# import asyncio
#
# BOT_TOKEN = "7844163188:AAFsJr9eCh1SzsT-OWAFtwcJJtppJM0gvqk"
#
# bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
# dp = Dispatcher()
#
# # ]
#
# initial_board = [
#     ["  ", "bp", "  ", "bp", "  ", "bp", "  ", "bp"],
#     ["bp", "  ", "bp", "  ", "bp", "  ", "bp", "  "],
#     ["  ", "bp", "  ", "bp", "  ", "bp", "  ", "bp"],
#     ["  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
#     ["  ", "  ", "  ", "  ", "  ", "  ", "  ", "  "],
#     ["wp", "  ", "wp", "  ", "wp", "  ", "wp", "  "],
#     ["  ", "wp", "  ", "wp", "  ", "wp", "  ", "wp"],
#     ["wp", "  ", "wp", "  ", "wp", "  ", "wp", "  "]
# ]
#
#
# # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–∏–≥—É—Ä
# piece_symbols = {
#     "wp": "‚õÇ", "wP": "‚ôö", "bp": "‚õÄ", "bP": "‚ôî"
# }
# symbls = {"a": 0, "b": 1, "c": 2, "d": 3, "e": 4, "f": 5, "g": 6, "h": 7}
#
# # –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
# user_states = {}
#
# # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# main_menu = ReplyKeyboardMarkup(
#     keyboard=[
#         [KeyboardButton(text="üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")],
#         [KeyboardButton(text="‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥")]
#     ],
#     resize_keyboard=True
# )
#
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–æ—Å–∫–∏ –≤ HTML
# def board_to_html(board):
#     keyboard = []
#
#     for i in range(8):
#         line = []
#         for j in range(8):
#             symbol = piece_symbols.get(board[i][j], ' ')
#             line.append(InlineKeyboardButton(text=symbol, callback_data=f"{i}:{j}"))
#         keyboard.append(line)
#     return InlineKeyboardMarkup(inline_keyboard=keyboard, resize_keyboard=True)
#
#
# @dp.message(CommandStart())
# async def cmd_start(message: Message):
#     await message.answer("‚ôü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ –±–æ—Ç–∞! ‚ôü", reply_markup=main_menu)
#
#
# @dp.message(F.text == "üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
# async def start_game(message: Message):
#     user_id = message.from_user.id
#     user_states[user_id] = {
#         "board": [row[:] for row in initial_board],
#         "color": "white",  # –ò–≥—Ä–æ–∫ –∏–≥—Ä–∞–µ—Ç –±–µ–ª—ã–º–∏
#         "waiting_for_move": False,
#         "selected_piece": None,
#         "message_id": message.message_id
#     }
#
#     await bot.send_message(message.chat.id, "–í–∞—à —Ö–æ–¥!\n–≤—ã–±–µ—Ä–µ—Ç–µ —Ñ–∏–≥—É—Ä—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ö–æ–¥–∏—Ç—å", reply_markup=board_to_html(user_states[user_id]["board"]))
#
#
# @dp.callback_query(lambda data: data is not None)
# async def process_move(data: CallbackQuery):
#     user_id = data.from_user.id
#     if user_id not in user_states:
#         await data.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
#         return
#
#     state = user_states[user_id]
#     text = data.data
#     col = int(text[0])
#     row = int(text[2])
#     message: Message = data.message
#
#     # –ï—Å–ª–∏ —Ñ–∏–≥—É—Ä–∞ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
#     if not state["waiting_for_move"]:
#         piece = state["board"][row][col]
#         if piece == "  " or not piece.startswith(state["color"][0]):
#             await bot.edit_message_text("–≤—ã–±–µ—Ä–µ—Ç–µ –°–í–û–Æ(‚õÇ/‚ôö) —Ñ–∏–≥—É—Ä—É —á—Ç–æ-–±—ã –ø–æ—Ö–æ–¥–∏—Ç—å:", message_id=message.message_id, chat_id=message.chat.id, reply_markup=board_to_html(user_states[user_id]["board"]))
#             return
#
#         state["selected_piece"] = (row, col)
#         state["waiting_for_move"] = True
#         try:
#             await bot.edit_message_text("–≤—ã–±–µ—Ä–µ—Ç–µ —Ñ–∏–≥—É—Ä—É —á—Ç–æ-–±—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å:", message_id=message.message_id, chat_id=message.chat.id, reply_markup=board_to_html(user_states[user_id]["board"]))
#         except:
#             pass
#     else:
#         # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞
#         from_row, from_col = state["selected_piece"]
#         piece = state["board"][from_row][from_col]
#
#         # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö–æ–¥–∞ (–±–µ–∑ —É—á–µ—Ç–∞ –ø—Ä–∞–≤–∏–ª —à–∞—Ö–º–∞—Ç)
#         if is_valid_move(state["board"], from_row, from_col, row, col):
#             # –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥
#             state["board"][row][col] = piece
#             state["board"][from_row][from_col] = "  "
#
#             # –ü–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ –±–æ—Ç—É (–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É)
#             state["color"] = "black" if state["color"] == "white" else "white"
#             state["waiting_for_move"] = False
#             state["selected_piece"] = None
#
#             await bot.edit_message_text("–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:",
#                               reply_markup=board_to_html(user_states[user_id]["board"]),
#                               parse_mode="HTML", chat_id=message.chat.id, message_id=message.message_id)
#
#             if state["color"] == "black":
#                 await bot_move(message, state)
#         else:
#             await data.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ö–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
#             await bot.edit_message_text("–í–∞—à —Ö–æ–¥!\n–≤—ã–±–µ—Ä–µ—Ç–µ —Ñ–∏–≥—É—Ä—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ö–æ–¥–∏—Ç—å", message_id=message.message_id,
#                                         chat_id=message.chat.id,
#                                         reply_markup=board_to_html(user_states[user_id]["board"]))
#             state["waiting_for_move"] = False
#             state["selected_piece"] = None
#
#
# # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—Å–ø–æ–º. —Ñ—É–Ω–∫—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# def path_clear(board, fr, fc, tr, tc):
#     """–ü—É—Ç—å –ø—É—Å—Ç? (–¥–ª—è –ª–∞–¥—å–∏/—Å–ª–æ–Ω–∞/—Ñ–µ—Ä–∑—è)"""
#     dr = (tr-fr) and ((tr-fr)//abs(tr-fr))  # -1,0,1
#     dc = (tc-fc) and ((tc-fc)//abs(tc-fc))
#     r, c = fr+dr, fc+dc
#     while (r, c) != (tr, tc):
#         if board[r][c] != "  ":
#             return False
#         r += dr
#         c += dc
#     return True
#
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ö–æ–¥–∞
# def is_valid_move(board, fr, fc, tr, tc):
#     """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ö–æ–¥–∞ —Ñ–∏–≥—É—Ä—ã (–±–µ–∑ —à–∞—Ö–∞/—Ä–æ–∫–∏—Ä–æ–≤–∫–∏/–ø–µ—à.–ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è)"""
#     if not (0 <= fr < 8 and 0 <= fc < 8 and 0 <= tr < 8 and 0 <= tc < 8):
#         return False
#
#     piece = board[fr][fc]
#     if piece == "  ":
#         return False
#     me, enemy = piece[0], 'b' if piece[0]=='w' else 'w'
#     target = board[tr][tc]
#
#
#
#
#     # –Ω–µ–ª—å–∑—è –±–∏—Ç—å —Å–≤–æ—é —Ñ–∏–≥—É—Ä—É
#     if target != "  " and target[0] == me:
#         return False
#
#     dr, dc = tr-fr, tc-fc
#     abs_dr, abs_dc = abs(dr), abs(dc)
#
#
#     if piece[1] == 'p':
#         direction = -1 if me=='w' else 1
#         if dc == 0:
#             # —à–∞–≥ –Ω–∞ 1 –∫–ª–µ—Ç–∫—É
#             if dr == direction and target == "  ":
#                 return True
#             # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–≤–æ–π–Ω–æ–π —Ö–æ–¥
#         # –≤–∑—è—Ç–∏–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
#         if abs_dc == 1 and dr == direction and target != "  " and target[0] == enemy:
#             return True
#         return False
#
#     return False
#
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–æ–¥–∞ –±–æ—Ç–∞
# async def bot_move(message: Message, state):
#     """–ü—Ä–æ—Å—Ç–æ–π —Ö–æ–¥ –±–æ—Ç–∞ (—Å–ª—É—á–∞–π–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ö–æ–¥)"""
#     await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–¥—É–º–∏–π
#
#     for i in range(8):
#         for j in range(8):
#             if state["board"][i][j] == "bP" and i < 7 and state["board"][i + 1][j] == "  ":
#                 state["board"][i + 1][j] = "bP"
#                 state["board"][i][j] = "  "
#                 state["color"] = "white"
#                 await bot.edit_message_text("–í–∞—à —Ö–æ–¥!", chat_id=message.chat.id, message_id=message.message_id, reply_markup=board_to_html(state["board"]), parse_mode="HTML")
#                 return
#
#     await message.answer("–ë–æ—Ç –Ω–µ –Ω–∞—à–µ–ª –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ö–æ–¥–∞!")
#
#
# async def main():
#     await dp.start_polling(bot)
#
#
# if __name__ == "__main__":
#     asyncio.run(main())
#
# def is_valid_move(board, fr, fc, tr, tc):
#     """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ö–æ–¥–∞ —Ñ–∏–≥—É—Ä—ã (–±–µ–∑ —à–∞—Ö–∞/—Ä–æ–∫–∏—Ä–æ–≤–∫–∏/–ø–µ—à.–ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è)"""
#     if not (0 <= fr < 8 and 0 <= fc < 8 and 0 <= tr < 8 and 0 <= tc < 8):
#         return False
#
#     piece = board[fr][fc]
#     if piece == "  ":
#         return False
#     me, enemy = piece[0], 'b' if piece[0]=='w' else 'w'
#     target = board[tr][tc]
#
#     # –Ω–µ–ª—å–∑—è –±–∏—Ç—å —Å–≤–æ—é —Ñ–∏–≥—É—Ä—É
#     if target != "  " and target[0] == me:
#         return False
#
#
#     print(tr-fr, tc-fc)
#
#     dr, dc = tr-fr, tc-fc
#     abs_dr, abs_dc = abs(dr), abs(dc)
#
#     # ‚îÄ‚îÄ‚îÄ –ü–µ—à–∫–∞ ‚îÄ‚îÄ‚îÄ
#     if piece[1] == 'P':
#         direction = -1 if me=='w' else 1
#         start_row = 6 if me=='w' else 1
#
#         # –æ–±—ã—á–Ω—ã–π —Ö–æ–¥
#         if dc == 0:
#             # —à–∞–≥ –Ω–∞ 1 –∫–ª–µ—Ç–∫—É
#             if dr == direction and target == "  ":
#                 return True
#             # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–≤–æ–π–Ω–æ–π —Ö–æ–¥
#             if fr == start_row and dr == 2*direction and board[fr+direction][fc] == "  " and target == "  ":
#                 return True
#         # –≤–∑—è—Ç–∏–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
#         if abs_dc == 1 and dr == direction and target != "  " and target[0] == enemy:
#             return True
#         return False
#
#
#
#     return False


import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart
from aiogram.types import WebAppInfo
import asyncio

TOKEN = "7844163188:AAFsJr9eCh1SzsT-OWAFtwcJJtppJM0gvqk"
WEBAPP_URL = "https://cssgridgarden.com/#ua"

bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–≥—Ä–∞—Ç—å!", web_app=WebAppInfo(url=WEBAPP_URL))]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:", reply_markup=keyboard)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


